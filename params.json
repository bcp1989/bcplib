{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"bcplib","body":"bcplib\r\n======\r\nbcplib is a object-oriented C library of common data structures and algorithms. \r\nThe philosophy of bcplib is to build a easy-to-use, easy-to-extend library.\r\nAnd I also try to make all modules independent so that user may only need\r\na very limit subset of bcplib to run a specific module. The development of\r\nbcplib is motivated by Java SDK. If you are familiar with Java, you can use\r\nbcplib in a way that you use Java.\r\n\r\nCurrently, bcplib is developed and tested in GCC 4 and C99 (well...currently I \r\nonly use variadic macros) standard. When using bcplib, you need to make sure the \r\nstructure alignment strategy in specific Compiler won't influence the function \r\nof bcplib.\r\n\r\nBe ware of the number of objects you created. Object in bcplib is space\r\nconsuming, in a 32-bit architecture, a *arraylist* object takes up to 104 bytes.\r\n- - -\r\nHow to use bcplib\r\n=================\r\nThe interface of bcplib is very simple.\r\n\r\nCreate && destroy Object\r\n------------------------\r\n`class_name A = new(class_name, arg1, arg2,...);` to \"new\" a Object and \r\n`destory(class_instance);` to \"release\" a Object.\r\n\r\nFunction call\r\n-------------\r\nIf a class is named A, and there is a instance of A called a, you can use \r\n`a->function_name(a, other_arguments);` to make a function call, remember to \r\nput the instance itself as the first argument of any function call, it's a\r\nnaive way to simulate *this* reference in Java.\r\n\r\nCast\r\n----\r\nJust like Java. If class A extends/inherits class B, you can use a instance \r\nof A where you need a instance of B. You can directly cast A to B. \r\n\r\nFor example, you can have a array of instance of class *collection*, and each \r\ninstance may be a *arraylist*, *linkedlist* or other class that inherits/extends\r\nfrom *collection*.\r\n\r\nThere are two ways to cast a object from one class to another. You can just type\r\neither `(class_A_name) class_B_instance_var` or \r\n`cast(class_A_name, class_B_instance_var)`\r\nto cast a instance variable of class B to class A. The different is that the\r\nlater one will do the type check.\r\n\r\nClass Type\r\n----------\r\nEvery object has a class type structure to indicate the type of the object.\r\n+ To check if a object is exactly the instance of a class, use\r\n    `instanceof`. \r\n+ To check if a object inherits/extends or is a instance of a class,\r\n    use `kindof`. \r\n+ To check whether a c pointer points to a object or something else, use \r\n    `is_object`.\r\n+ To get the class type of a object instance, use `classof`.\r\n+ To get the class type of a given class name, use `class_by_name`.\r\n\r\n\r\nConventions for developing bcplib\r\n---------------------------------\r\nPlease see convention.md for the latest convention list.\r\n+ User must define a 'X_prototype' macro which includes all attributes and\r\n    methods for their class.\r\n+ User must define a 'X_interface' macro which includes all attributes and \r\n    methods for their interface.\r\n+ Inside the prototype, 'extends' should always be the first elements.\r\n+ All macros in upper letters should be used outside function blocks, \r\n    all macros in lower letters should be used inside function blocks.\r\n+ Inside initializer and finalizer functions, 'self' is a keywords can be used\r\n    as a pointer to the object instance, and 'flag' is a extra information to\r\n    decide how to initialize the object instance ('overload'). User can use\r\n    the flag in any way they like (or Please see the class in bcplib for\r\n    recommend style). Note that 'INIT_DEFAULT' is preserved to indicate the\r\n    default initializer and its value is 0.\r\n    Note that in bcplib, some flag value are conflict with each other, I solve\r\n    it by simply set a priority of flags. Flags with low priority won't valid \r\n    if a flag with higher priority is set.\r\n+ The range of size_t is from -1 to (2^8)^sizeof(size_t) - 1. If you cast \r\n    size_t into some signed number, -1 will be the max value of the size_t,\r\n    so I preserve the max value to represent -1 so that many functions can be\r\n    benefit it.\r\n\r\nOO in bcplib\r\n============\r\nLike Java, bcplib support concepts of class, single inherit/extends, interface, \r\nabstract class, final class. However, some of the concepts are not 100% the same \r\nas Java. \r\n\r\nThings to know before start\r\n---------------------------\r\nThe internal represent of bcplib may be complicated, however, to provide a easy-\r\nto-use library, the interface of bcplib is very simple, even, a little bit \r\nincompatible with the \"normal\" rule of software development. \r\n+ *id*, a universal pointers to *Object* in bcplib, just like *id* in \r\n  Objective-C. Nearly every *Object Function* takes a *id* as input, to simulate\r\n  the *this* reference. Inside each *Object Function*, the function first cast \r\n  the *id* to the type it needs so that user don`t have to do the cast when use\r\n  a function of parent class. \r\n+ Every class type is a pointer type. For example, \"arraylist\" is actually\r\n  \"arraylist_t \\*\". You can also use your own way to allocate the structure and\r\n  use initialize a class instead of create function. For example, normally, you\r\n  write `arraylist a = arraylist_create();`, here *a* is a pointer type; and you\r\n  can also write `arraylist_t a;` and then use `arraylist_init(&a);` to\r\n  initialize it, here *a* is a structure type.\r\n\r\nClass\r\n-----\r\nIn bcplib, each class is actually a structure. Every class in bcplib *extends* \r\nthe root class *Object*. We need the following things to define a class:\r\n+ A *prototype* of class, defined by using a macro.\r\n+ Definition for each function type.\r\n+ Functions to *create* and *destroy* a class.\r\n+ Functions to *initialize* and *finalize* a class.\r\n\r\nPrototype\r\n---------\r\nIn order to let others inherits/extends itself, one *Class* should define a \r\nprototype of itself. The prototype is defined by using a macro, simply list all \r\ndata and functions.\r\n\r\nInherit\r\n-------\r\nIn bcplib, inherit is just use another set of functions to initialize a class.\r\nIf class A inherits class B, A cannot have any function or data that B does not \r\nhave. For example, function *arraylist_create_list_iterator* in *arraylist.c* \r\ncreate a anonymous class that inherits class *list_iterator* by initializing the\r\nclass with some functions defined in *arraylist.c*.\r\n\r\nExtends\r\n-------\r\nExtends in bcplib is like Java. Class A extends class B means that A has all\r\nfunction declarations and data that B has, and A may has its own functions or \r\ndata that B does not have. In the prototype of A, the prototype of B should be \r\nthe first element so that we can cast A to B. However, this trick way is \r\ndepend on the structure alignment strategy in specific Compiler.\r\n\r\nInterface\r\n---------\r\nInterface is just a macro contains data or function lists. A class may includes\r\nthe interface in any position of its prototype except the first one (first \r\nelement is reserved for the prototype of parent class). We cannot cast a class\r\nto the interface it implements. So the concept interface in bcplib is \r\nincomplete compared to Java.\r\n\r\nAbstract class\r\n--------------\r\nYou cannot create a abstract class, so in bcplib, a class without any *create* \r\nor \"destroy\" functions can be treated as a abstract class. User can still \r\nallocate a abstract class and use \"init_xxxx\" function to initialize it, but \r\nit's very dangerous, for the definition of such a abstract class may be \r\nincomplete, any function call may lead unknown error.\r\n\r\nFinal class\r\n-----------\r\nYou cannot extends/inherits a final class in bcplib, since final class does not \r\nhave a prototype as well as *initialize* and *finalize* functions.\r\n\r\n","google":"","tagline":"OO C library"}